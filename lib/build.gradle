buildscript {
    repositories {
        maven { url uri('https://jitpack.io') }
    }
    dependencies {
        classpath 'com.github.i-net-software:jwebassembly-gradle:master-SNAPSHOT'
    }
}

plugins {
}

apply plugin: 'de.inetsoftware.jwebassembly'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.i-net-software:jwebassembly-api:master-SNAPSHOT'
}

tasks.named('wasm') {
  //Get more debug information if there are problems.
  //logging.level = LogLevel.DEBUG
  //logging.levelInternal = LogLevel.DEBUG

  //Change the output format to the text format *.wat. 
  //This can be helpful to understand the problems if you see the generated code as text format.
  //format = 'text'

  //The used JWebAssembly compiler version. The default is the latest release '+'. 
  //You can set any valid Gradle version string or a full dependency string. 
  //The snapshot version is recommended until a stable release.
  //compilerVersion = 0.2
  compilerVersion = 'com.github.i-net-software:jwebassembly:master-SNAPSHOT'

  //Write method and parameter names into the output *.wasm file. 
  //The file will be approximate 10% larger. And it generate a source map. 
  //With a source map you can see in the debugger of the browser your source code if available.
  debugNames = true

    //Set an absolute or relative path between the final wasm file location and the source files location.
    ///This is needed for debugging in the browser. It work only if debugNames = true.
    //sourceMapBase = '../../src/main/java/'
    //sourceMapBase = '/src/main/java/'

    //set the destination dir
    //destinationDir = file( 'targetDir' )

    //ignore all referenced native methods without declared replacement in a library and replace them with a stub that throws an exception at runtime
    //ignoreNative = true
 }
